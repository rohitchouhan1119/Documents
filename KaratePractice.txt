
>>> Under src/main/java - add utility package like com.company.utility
	database connection 
>>> Under src/main/resource - add any jar file

>>> Src/test/java
1. basic-auth-js   - can have credential for database as it will be common for all the test cases
2. karate-config.js  - database credential, base url, app url in config variable and environment in env variable
3. Create projectService package for regression, smoke and all servicesTest class, keep all common feature under ProjectService
		Regression, smoke and serviceTest class will have ProjectService Package in it.(package ProjectService)
4. Create ProjectService.data package for data, here you can create function in js or keep json object for body of request,
5. create package for each APIName like ProjectService.loginAPI, ProjectService.logoutAPI etc
6. Each package will have positive and negative test case feature file and runner file of feature
7. In each feature file, define variable in background like
		* url baseUrl  + baseEndPoint
		* path  'apiEndPoint'
		# Get credentials from credentials file which have userId and password in json object
		* def CredentialsBody = read('classpath:ProjectService/data/requestBody.json')
		* def userId = CredentialsBody.userId
		* def password = CredentialsBody.password

	Now start the scenario,
	Scenario: name of scenario and mention the test case id, endPoint, scenario description 
	Given request {"userId" : "#(userid)","passowrd" : "#(password)"} 
	When method post 
	Then status 200 
	And match response.message == "user is logged in" 
	And match response.status == "OK"
	
8. Create a package ProjectService.APIName.data for specific package and add javascript function or json object

9. Runner class for paralle execution
	@KarateOptions(tags = { "@ regression or smoke" }) 
	public class SmokeTestParallel {
     
		@Test
		public void testParallel() {
        Results results = Runner.parallel(getClass(), 5);	// Runs in 5 threads
        generateReport(results.getReportDir());
        assertTrue(results.getErrorMessages(), results.getFailCount() == 0);        
		}
    
		public static void generateReport(String karateOutputPath) {        
        Collection<File> jsonFiles = FileUtils.listFiles(new File(karateOutputPath), new String[] {"json"}, true);
        List<String> jsonPaths = new ArrayList<String>(jsonFiles.size());
        jsonFiles.forEach(file -> jsonPaths.add(file.getAbsolutePath()));
        Configuration config = new Configuration(new File("targetFolder"), "test Execution report of regression or smoke");
        ReportBuilder reportBuilder = new ReportBuilder(jsonPaths, config);
        reportBuilder.generateReports();        
		}

	}


	
10. POM.xml file

<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.company.projectName</groupId>
	<artifactId>ProjectName-api</artifactId>
	<version>1.0.0</version>
	<name>ProjectName API Automation</name>
	<packaging>jar</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
		<maven.compiler.version>3.8.0</maven.compiler.version>
		<karate.version>0.9.0</karate.version>
		<mongodb.version>3.6.3</mongodb.version>
		
		<cucumber.reporting.version>3.14.0</cucumber.reporting.version>
		<jsonpath.version>2.4.0</jsonpath.version>
		<json.version>2.8.2</json.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.intuit.karate</groupId>
			<artifactId>karate-apache</artifactId>
			<version>${karate.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.intuit.karate</groupId>
			<artifactId>karate-junit4</artifactId>
			<version>${karate.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/net.masterthought/cucumber-reporting -->
		<!-- For HTML reporting -->
		<dependency>
			<groupId>net.masterthought</groupId>
			<artifactId>cucumber-reporting</artifactId>
			<version>${cucumber.reporting.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.jayway.jsonpath/json-path -->
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
			<version>${jsonpath.version}</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.mongodb/mongodb-driver -->
		<!-- For utils; access to MongoDB -->
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongodb-driver</artifactId>
			<version>${mongodb.version}</version>
		</dependency>
		<!-- For utils; access to Oracle DB -->
	<!-- 	<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc7</artifactId>
			<version>12.1.0.2</version>
		</dependency>  -->
		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<!-- For utils; access to MySQL DB -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.6</version>
		</dependency>
	</dependencies>

	<build>
		<testResources>
			<testResource>
				<directory>src/test/java</directory>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</testResource>
		</testResources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.version}</version>
				<configuration>
					<encoding>UTF-8</encoding>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<compilerArgument>-Werror</compilerArgument>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project> 


11. Logger file i.e. logger.xml

<?xml version="1.0" encoding="UTF-8"?>
<configuration>
 
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>
  
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>target/karate.log</file>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>    
   
    <logger name="com.intuit" level="DEBUG"/>
   
    <root level="info">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
    </root>
  
</configuration>


12. README.md

# CompanyName ProjectName API tests

This project contains tests for the project APIs. 
It is based on [Karate](https://github.com/intuit/karate).

## Setup

This project expects JDK 1.8 (at least jdk1.8.0_162), Maven 3.6.0 and JUnit 4. 

1. Clone the repo
2. To open project, import as Maven project into a workspace (in Eclipse, File > Import... > Existing Maven Projects).
3. Install Oracle JDBC driver to local Maven by running the following from command line: 

	`mvn install:install-file -Dfile=src/main/resources/ojdbc7.jar -DgroupId=com.oracle -DartifactId=ojdbc7 -Dversion=12.1.0.2 -Dpackaging=jar`

## Running tests

__NOTE__: If you encounter errors running tests:
* from Command Line, run `mvn clean compile`
* in eclipse, right-click project and select maven > update project

To run entire regression suite (runs tests in parallel) 

	mvn test -Dtest=[service_folder_name].RegressionTestParallel -DargLine="-Dkarate.env=[dev/qa]"
e.g. 

	mvn test -Dtest=ssoService.RegressionTestParallel -DargLine="-Dkarate.env=qa"


### Additional options

To run only smoke tests (runs tests in parallel):

	mvn test -Dtest=[service_folder_name].SmokeTestParallel -DargLine="-Dkarate.env=[dev/qa]"
e.g. 
	
	mvn test -Dtest=ProjectService.SmokeTestParallel -DargLine="-Dkarate.env=qa"


To run the all tests for a specific endpoint:

	mvn test -Dtest=[api_runner_file_name]
e.g. 

	mvn test -Dtest=LoginAPIRunner


To run entire test suite (including all services) in one thread:

	mvn test


## Reports

Individual html, xml and json reports are saved to `target/surefire-reports`.
When using TestParallel.java, summary HTML reports are also saved to `target/cucumber-html-reports`; `overview-features.html` is root file.

## Logging

A log file `target/karate.log` is generated with each run.

To reduce information written to log files, change the log level from DEBUG to INFO:
In logger.xml, change `<logger name="com.intuit" level="DEBUG"/>` to `<logger name="com.intuit" level="INFO"/>`.
## Creating new tests

Refer to [Usage Guidelines] link



13. karate-config.js file

function() {    
  var env = karate.env; // Get system property 'karate.env'
  if (!env) {	// Set to this if no env provided
    env = 'qa';
  }
  karate.log('karate.env system property is:', env);
  
  // Set base config
  var config = {
    databaseUserName: 'dbusername',
    basePath: 'basepath'
  }
  
  // Override here only if different from base e.g. config.foo = 'bar';
  if (env == 'dev') {
    config.baseUrl = 'company url';
    config.appUrl = 'environment url for api in dev';
    config.mongoDbUrl = 'database url';
    config.dbPassword = 'passsword';
  } else if (env == 'qa') {
	config.baseUrl = 'company url';
    config.appUrl = 'environment url for api in qa';
    config.mongoDbUrl = 'database url';
    config.dbPassword = 'passsword';s
  } else if (env == 'uat') {
    config.baseUrl = 'company url';
    config.appUrl = 'environment url for api in uat';
    config.mongoDbUrl = 'database url';
    config.dbPassword = 'passsword';
  }
  
  // Timeout if a connection or servers don't respond within 5 seconds
  karate.configure('connectTimeout', 10000);
  karate.configure('readTimeout', 10000);
  
  return config;
}